
on:
  workflow_dispatch:
    inputs:
      dryrun:
        description: "dryrun?"
        required: true
        default: false
        type: boolean
      hotfix:
        description: "hotfix?"
        required: true
        default: false
        type: boolean
      publish_hotfix:
        description: "publish the hotfix as a release?"
        required: true
        default: false
        type: boolean
      run_tests:
        description: "run all tests?"
        required: true
        default: true
        type: boolean
      db_upgrade:
        description: "run db upgrade?"
        required: true
        default: true
        type: boolean
      send_mail:
        description: "send error mail"
        required: true
        default: true
        type: boolean
      publish_release:
        description: "publish the release?"
        required: true
        default: true
        type: boolean
      UpdateVersion:
        description: "update the version number (auto triggers on dev branch)"
        required: true
        default: false
        type: boolean



name: trigger-workflow
jobs:

  version-actions:
    runs-on: ubuntu-latest
    name: version-actions
    outputs:
      version: ${{ steps.generate_num.outputs.version }}
    steps:

      - name: set env if hotfix == true
        if: ${{ github.event.inputs.hotfix == true }} 
        run: |
          echo "hotfix=True" >> $GITHUB_ENV

      - name: set env if UpdateVersion == true
        if: ${{ github.event.inputs.UpdateVersion == true }} 
        run: |
          echo "UpdateVersion=True" >> $GITHUB_ENV
      
      # get git code
      - name: Check out source repository
        id: checkoutsourcerepo
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GitPASSWORD }}
          
      # Generates the core version based on the core-version file
      - name: Generate core-versions
        id: generate_num
        run: |
          sudo apt install python3 >> /dev/null

          echo "::set-output name=old_version::$(cat version.txt)"

          python3 version.py

          echo "::set-output name=version::$(cat version.txt)"

      - name: push to git
        if: ${{ steps.generate_num.outputs.old_version != steps.generate_num.outputs.version }}
        run: |
          echo ${{ steps.generate_num.outputs.old_version }}
          echo ${{ steps.generate_num.outputs.version }}

          git config --global user.email "benedikt.liebs@fellow-consulting.de"
          git config --global user.name "FellowFellow"

          git add version.txt
          git tag ${{ steps.generate_num.outputs.version }} HEAD
          git commit -m "version change ${{ steps.generate_num.outputs.old_version }} -> ${{ steps.generate_num.outputs.version }}"
          git push
          git push --tags




